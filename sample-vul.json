{
  "cwe_id": "CWE-755",
  "cve_id": "CVE-2019-3558",
  "vulnerable_code": "/*\n * Copyright 2004-present Facebook, Inc.\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n#ifndef _THRIFT_PROTOCOL_TPROTOCOLEXCEPTION_H_\n#define _THRIFT_PROTOCOL_TPROTOCOLEXCEPTION_H_ 1\n\n#include <thrift/lib/cpp/Thrift.h>\n\n#include <string>\n\nnamespace apache { namespace thrift { namespace protocol {\n\n/**\n * Class to encapsulate all the possible types of protocol errors that may\n * occur in various protocol systems. This provides a sort of generic\n * wrapper around the shitty UNIX E_ error codes that lets a common code\n * base of error handling to be used for various types of protocols, i.e.\n * pipes etc.\n *\n */\nclass TProtocolException : public apache::thrift::TLibraryException {\n public:\n\n  /**\n   * Error codes for the various types of exceptions.\n   */\n  enum TProtocolExceptionType\n  { UNKNOWN = 0\n  , INVALID_DATA = 1\n  , NEGATIVE_SIZE = 2\n  , SIZE_LIMIT = 3\n  , BAD_VERSION = 4\n  , NOT_IMPLEMENTED = 5\n  , MISSING_REQUIRED_FIELD = 6\n  };\n\n  TProtocolException() :\n    apache::thrift::TLibraryException(),\n    type_(UNKNOWN) {}\n\n  explicit TProtocolException(TProtocolExceptionType type) :\n    apache::thrift::TLibraryException(),\n    type_(type) {}\n\n  explicit TProtocolException(const std::string& message) :\n    apache::thrift::TLibraryException(message),\n    type_(UNKNOWN) {}\n\n  TProtocolException(TProtocolExceptionType type, const std::string& message) :\n    apache::thrift::TLibraryException(message),\n    type_(type) {}\n\n  ~TProtocolException() throw() override {}\n\n  /**\n   * Returns an error code that provides information about the type of error\n   * that has occurred.\n   *\n   * @return Error code\n   */\n  TProtocolExceptionType getType() const {\n    return type_;\n  }\n\n  const char* what() const throw() override {\n    if (message_.empty()) {\n      switch (type_) {\n        case UNKNOWN         : return \"TProtocolException: Unknown protocol exception\";\n        case INVALID_DATA    : return \"TProtocolException: Invalid data\";\n        case NEGATIVE_SIZE   : return \"TProtocolException: Negative size\";\n        case SIZE_LIMIT      : return \"TProtocolException: Exceeded size limit\";\n        case BAD_VERSION     : return \"TProtocolException: Invalid version\";\n        case NOT_IMPLEMENTED : return \"TProtocolException: Not implemented\";\n        case MISSING_REQUIRED_FIELD :\n          return \"TProtocolException: Missing required field\";\n        default              : return \"TProtocolException: (Invalid exception type)\";\n      }\n    } else {\n      return message_.c_str();\n    }\n  }\n\n  [[noreturn]] static void throwUnionMissingStop();\n  [[noreturn]] static void throwReportedTypeMismatch();\n  [[noreturn]] static void throwNegativeSize();\n  [[noreturn]] static void throwExceededSizeLimit();\n  [[noreturn]] static void throwMissingRequiredField(\n      folly::StringPiece field,\n      folly::StringPiece type);\n  [[noreturn]] static void throwBoolValueOutOfRange(uint8_t value);\n\n protected:\n  /**\n   * Error code\n   */\n  TProtocolExceptionType type_;\n\n};\n\n}}} // apache::thrift::protocol\n\n#endif // #ifndef _THRIFT_PROTOCOL_TPROTOCOLEXCEPTION_H_"
}
